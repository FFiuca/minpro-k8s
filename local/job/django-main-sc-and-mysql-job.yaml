# SYNC THROUGH VOLUME NOT SUCCESS YET. PREFER USE ffiuca/django-ecommerce

apiVersion: v1
kind: ConfigMap
metadata:
  name: django-mysql-config-map
  namespace: django
  labels:
    app: django
data:
  MYSQL_DATABASE: django_ecommerce
  MYSQL_USER: admin
  # MYSQL_ROOT_PASSWORD: root
  # MYSQL_PASSWORD: admin
  MYSQL_PORT: '3306'

---
apiVersion: v1
kind: Secret
metadata:
  name: django-mysql-secret
  namespace: django
  labels:
    app: django
type: Opaque
stringData:
  MYSQL_ROOT_PASSWORD: root
  MYSQL_PASSWORD: admin


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: django-redis-config-map
  namespace: django
  labels:
    app: django
data:
  REDIS_PORT: '6379'

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: django-app-config-map
  namespace: django
  labels:
    app: django
data:
  APP_PORT: '8001'
  # DB_HOST: 0.0.0.0
  DB_HOST: django-mysql-external-service.django.svc.cluster.local
  DB_PORT: '3306' # because using URL connection
  DB_ROOT_USERNAME: root
  DB_USERNAME: root
  # DB_PASSWORD: root
  DB_DATABASE: django_ecommerce
  REDIS_HOST: django-redis-service.django.svc.cluster.local
  REDIS_PORT: '6379'
  EMAIL_HOST: 'smtp.gmail.com'
  EMAIL_PORT: '587'
  EMAIL_HOST_USER: 'fiuca.gree.id@gmail.com'
  # EMAIL_HOST_PASSWORD: 'fepznjrmriuivxef'
  EMAIL_USE_TLS: 'True'
  EMAIL_FROM_ADDRESS: 'fiuca.gree.id@gmail.com'
  EMAIL_FROM_NAME: "fiuca"

---
apiVersion: v1
kind: Secret
metadata:
  name: django-app-secret
  namespace: django
  labels:
    app: django
type: Opaque
stringData:
  EMAIL_HOST_PASSWORD: 'fepznjrmriuivxef'
  DB_PASSWORD: root

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: django-sc
  namespace: django
  labels:
    app: django
# provisioner: k8s.io/minikube-hostpath # from kubect get sc -> provisioner
provisioner: docker.io/hostpath
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
# parameters depends provisioner being used
# parameters:
#   storageaccounttype: Premium_LRS
#   kind: managed

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: django-redis-pv-claim
  namespace: django
  labels:
    app: django
spec:
  resources:
    requests:
      storage: 200Mi
  storageClassName: django-sc
  accessModes:
  - ReadWriteOnce

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: django-mysql-pv
  namespace: django
  labels:
    app: django
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /mysql.data

# this is important to syncronize between migration files and db and static files
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: django-app-pv
  namespace: django
spec:
  # storageClassName: standard
  storageClassName: hostpath
  accessModes:
  - ReadWriteMany
  capacity:
    storage: 10Gi
  hostPath:
    # path: /data/app # by my workdir=/app/django on this image. so /app will be entrypoint and /django will setting at container mount
    path: /mnt/data

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: django-app-pv-claim
  namespace: django
spec:
  resources:
    requests:
      storage: 1Gi
  # volumeMode: Filesystem
  # storageClassName: "" # it important to bounding into wanted pv
  # storageClassName: standard
  storageClassName: hostpath
  volumeName: django-app-pv
  accessModes:
  - ReadWriteMany

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-app-deployment
  namespace: django
  labels:
    app: django
spec:
  replicas: 1
  selector:
    matchLabels:
      app: django-app
  template:
    metadata:
      name: django-app-pode
      labels:
        app: django-app
    spec:
      volumes:
      # - name: volume-mysql
      #   persistentVolumeClaim:
      #     claimName: django-mysql-pv-claim
      # - name: volume-redis
      #   persistentVolumeClaim:
      #     claimName: django-redis-pv-claim
      - name: volume-django
        persistentVolumeClaim:
          claimName: django-app-pv-claim
      - name: volume-curl
        emptyDir: {}
      containers:
      - name: mycurl
        image: ffiuca/mycurl
        # - name: django-redis-container
      #   image: redis:7.2.4-alpine
      #   ports:
      #   - containerPort: 6379
      #   envFrom:
      #   - configMapRef:
      #       name: django-redis-config-map
      #   volumeMounts:
      #   - mountPath: /usr/local/etc/redis
      #     name: volume-redis
      - name: nginx
        image: nginx:stable-alpine3.17-slim
        ports:
        - containerPort: 80
      - name: django-app-container
        image: ffiuca/django-ecommerce:only-run.v1
        imagePullPolicy: Always
        ports:
        - containerPort: 8001
        envFrom:
        - configMapRef:
            name: django-app-config-map
        - secretRef:
            name: django-app-secret
        volumeMounts:
        - mountPath: /test
          name: volume-django
      - name: django-app-debug
        image: ffiuca/django-ecommerce:only-run.v1
        imagePullPolicy: Always
        ports:
        - containerPort: 8002
        env:
        - name: APP_PORT
          value: '8002' # this is priority than env file from docker
        envFrom:
        - configMapRef:
            name: django-app-config-map
        - secretRef:
            name: django-app-secret
        volumeMounts:
        - mountPath: /test
          name: volume-django

---
apiVersion: v1
kind: Service
metadata:
  name: django-mysql-service
  namespace: django
  labels:
    app: django
spec:
  type: ClusterIP
  selector:
    app: django-mysql
  ports:
  - name: port-mysql
    port: 3306
    targetPort: 3306
    # nodePort: 30001


---
apiVersion: v1
kind: Service
metadata:
  name: django-redis-service
  namespace: django
  labels:
    app: django
spec:
  type: ClusterIP
  selector:
    app: django-redis-app
  ports:
  - name: port-redis
    port: 6379
    targetPort: 6379

# External to connect to the mysql
---
apiVersion: v1
kind: Service
metadata:
  name: django-mysql-external-service
  namespace: django
  labels:
    app: django
spec:
  type: ExternalName
  # externalName: kubernetes.docker.internal # THIS IS FOR DOKCER DRIVER/CONTEXT
  externalName: host.docker.internal # THIS IS FOR DOKCER DRIVER/CONTEXT
  # externalName: host.minikube.internal
  ports:
  - port: 3306


# External to check purpose
---
apiVersion: v1
kind: Service
metadata:
  name: django-laragon-external-service
  namespace: django
  labels:
    app: django
spec:
  type: ExternalName
  externalName: kubernetes.docker.internal
  # externalName: host.minikube.internal
  ports:
  - port: 80



---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: django-mysql-statefulset
  namespace: django
  labels:
    app: django
spec:
  selector:
    matchLabels:
      app: django-mysql
  serviceName: django-mysql-service
  replicas: 1
  template:
    metadata:
      labels:
        app: django-mysql
    spec:
      containers:
      - name: django-mysql-container
        image: mysql
        ports:
        - containerPort: 3306
        envFrom:
        - configMapRef:
            name: django-mysql-config-map
        - secretRef:
            name: django-mysql-secret
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: django-mysql-pv-claim
  volumeClaimTemplates:
  - metadata:
      name: django-mysql-pv-claim # if not exist will create automatically
    spec:
      accessModes: ["ReadWriteOnce"]
      # storageClassName: django-sc # use when use storage class
      volumeMode: Filesystem
      resources:
        requests:
          storage: 1Gi

# REDIS
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: django-redis-statefulset
  namespace: django
  labels:
    app: django
spec:
  selector:
    matchLabels:
      app: django-redis-app
  serviceName: django-redis-service
  replicas: 1
  template:
    metadata:
      labels:
        app: django-redis-app
    spec:
      containers:
      - name: django-redis-container
        image: redis:7.2.4-alpine
        ports:
        - containerPort: 6379
        envFrom:
        - configMapRef:
            name: django-redis-config-map
        volumeMounts:
        - mountPath: /usr/local/etc/redis
          name: django-redis-pv-claim
  volumeClaimTemplates:
  - metadata:
      name: django-redis-pv-claim
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 250Mi


---
apiVersion: v1
kind: Service
metadata:
  name: django-app-service # will use for host name in container communications. not use container id again like in docker.
  namespace: django
  labels:
    app: django
spec:
  # type: NodePort
  type: LoadBalancer # for az
  selector:
    app: django-app
  ports:
  - name: port-app
    port: 8001
    targetPort: 8001
    # nodePort: 30003
  - name: port-nginx
    port: 80
    targetPort: 80
    # nodePort: 30004
  # - name: port-mysql
#   port: 3306
#   targetPort: 3306
#   nodePort: 30001
# - name: port-redis
#   port: 6379
#   targetPort: 6379
#   nodePort: 30002


